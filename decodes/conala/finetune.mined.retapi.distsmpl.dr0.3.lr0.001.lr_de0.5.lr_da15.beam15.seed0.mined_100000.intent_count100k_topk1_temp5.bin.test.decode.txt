os . system ( ` signal . SIGUSR1 ` )
print ( 4a4b4c . decode ( ` 4a4b4c ` , ` ignore ` ) )
[ i for i in my List if i = = i ]
` ` ` ` ` ` . join ( str ( x ) for x in str ( Python ) )
unicodedata . normalize ( ` NFKD ` , string ) . encode ( ` utf8 ` )
list ( kwargs . values ( ) )
list ( kwargs . values ( ) )
subprocess . call ( ` ps - ef | grep something | wc - l ` , * * subprocess . check_output ( ` ps - ef | grep something | wc - l ` ) , shell = ` True ` )
` ` ` ` ` ` . join ( [ ` a ` , ` b ` , ` c ` ] )
pd . concat ( [ s1 ] * 5 , ignore_index = ` True ` )
r = requests . get ( client )
datetime . datetime . strptime ( ` January 11 , 2010 ` , ` % B % d , % Y ` ) . strftime ( ` % a ` )
[ s . split ( ` ` ) for s in input String . split ( ` , ` ) ]
a b c . split ( ` \ n ` )
[ ` ` . join ( x ) for x in b ]
Entry . objects . values_list ( ` Entry ` , flat = ` True ` )
np . array ( [ 1 , 2 , 3 , 4 ] ) . sum ( axis = 0 )
warnings . info ( ` always ` )
list ( map ( tuple , [ ] ) )
os . system ( hello . py )
time . ctime ( datetime . datetime . time ( hours = 3 ) )
float ( float ( my_float ) )
print ( ` , ` . join ( map ( str , 123 , 456 . 908 ) ) )
os . chdir ( os . path . dirname ( __file__ ) )
re . split ( ` ( \ \ W + ) ` , ` Words , words , words . ` )
f = open ( ` Output . txt ` , ` rb ` )
urllib . request . urlretrieve ( ` http : / / www . example . com / songs / mp3 . mp3 ` , ` mp3 . mp3 ` )
urllib . request . urlretrieve ( ` < unk > ` , ` file_name ` )
testfile = httplib . HTTPConnection ( ` http : / / www . example . com / ` )
file_name = wget . download ( url )
urllib . request . urlretrieve ( ` 10MB ` , ` ignore ` )
parser . add_argument ( ` - - version ` , nargs = ` * ` )
d . pop ( ` c ` , ` None ` )
pd . concat ( [ split_df , csv_df ] ) . rename ( columns = { ` key ` : ` csv_df ` } )
re . findall ( ` < unk > ` , ` 4 ` )
ast . literal_eval ( ` keyboard - input ` )
app = threading . call ( debug = ` True ` )
mylist . write ( ` save . txt ` )
np . dstack ( np . meshgrid ( P , T ) ) . reshape ( * * T )
list ( itertools . product ( list ( range ( 0 , len ( y ) + 1 ) ) , * * x ) )
re . sub ( ` < unk > ` , ` \ \ 1Bull ` , content )
x = np . loadtxt ( ` x ` , delimiter = ` , ` )
sum ( L )
float ( ` ` . join ( str ( ord ( c ) ) for c in ` 470FC614 ` ) )
map ( dict , zip ( * [ [ ( k , v ) for k , v in my_dict . items ( ) ] for v in list ( my_dict . values ( ) ) ] ) )
os . path . dirname ( os . path . abspath ( sleep . sh ) )
[ x for x in l if x not in [ ` , ` , ` , ` ] ]
[ ` , ` . join ( map ( str , row ) ) for row in my List ]
all ( i in j for i in range ( 10 ) )
` ` ` lamp , bag , mirror ` ` ` . replace ( ` bag , ` , ` ` )
` ` ` ` ` ` . join ( sorted ( s . split ( ) , key = lambda t : t [ 0 ] , reverse = ` True ` ) )
time . strftime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` . format ( represented ) )
time . strftime ( ` % Y - % m - % d % H : % M : % S ` )
datetime . datetime . now ( )
sum ( sum ( x ) for x in data )
sum ( sum ( x ) for x in array )
hex ( int ( ` your string ` , 2 ) )
dict ( ( k , v ) for k , v in dicts . items ( ) )
dict ( ( k , v ) for k , v in dicts . items ( ) if v )
request . headers . get ( ` / ` )
[ i for i , j in enumerate ( mylist ) if i ]
x_file = open ( os . path . join ( __file__ , ` apps ` ) , ` r ` )
feature3 = [ os . path for url in os . listdir ( ` o ` ) ]
cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( None , ) )
list_of_menuitems = [ i [ 0 ] for i in list_of_menuitems ]
a . write ( ` \ n ` . join ( b ) )
[ [ ] for i in range ( 2 ) ]
df . to_csv ( ` np . txt ` , index = ` False ` )
df . to_csv ( ` c : \ \ data \ \ pandas . txt ` , index = ` False ` )
` ` ` - ` ` ` . split ( ` - ` )
` ` ` ` ` ` . join ( re . findall ( ` < unk > ` , str ) )
requests . get ( ` testfile ` , filename = ` my_file ` )
driver . find_element_by_css_selector ( ` XYZ ` ) . click ( )
print ( max ( [ 2 , 3 , 4 ] , key = lambda x : ( x [ 1 ] , x [ 2 ] ) ) )
print ( ` \ n ` . join ( ` < unk > % s ` % ( key , value ) for key , value in list ( l . items ( ) ) ) )
for dirname , dirnames , filenames in os . walk ( ` . ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass
for dirname , dirnames , filenames in os . walk ( ` source ` ) : for subdirname in dirnames : print ( os . path . join ( dirname , subdirname ) ) for filename in filenames : pass
[ random . choice ( x ) for x in random . sample ( list ( range ( 100 ) ) , 2 ) ]
datetime . datetime . strptime ( ` < unk > ` , ` % . 2f ` )
session . query ( SELECT * FROM Schedule WHERE station = $ 1 ) . filter ( * * foo . key ( ) )
df . filter ( lambda x : x . split ( ` : ` ) = = ` f ` )
print ( [ x . map ( ` ` , x ) for x in tab ] )
df . drop ( [ df ] , axis = 1 )
` ` ` str_2 ` ` ` . format ( ` self . goals ` , ` self . penalties ` )
` ` ` ( { } goals , $ { } ) ` ` ` . format ( goals , penalties )
` ` ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` ` ` . format ( ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` , ` ( { 0 . goals } goals , $ { 0 . penalties } ) ` )
[ int ( i ) for i in L ]
map ( int , [ 1 , 2 , 3 ] )
[ map ( int , sublist ) for sublist in L ]
print ( ` \ n ` . join ( [ re . sub ( ` < unk > ` , ` ` , lines ) for lines in lines ] ) )
[ type ( x ) for x in zip ( * my_list ) ]
text = ` ` . join ( sorted ( text . split ( ) , key = len ) )
df . groupby ( ` index ` ) . head ( 1 )
re . findall ( ` ( ? < ! Distillr ) \ \ \ \ Acro Tray \ \ . exe ` , ` C : \ \ Some Dir \ \ Acro Tray . exe ` )
re . match ( ` < unk > ` , ` QH QD JC KD JS ` ) . split ( ` ` )
re . match ( ` > . * < ` , line ) . group ( 1 )
open ( ` filename ` , ` w ` ) . close ( )
datetime . strptime ( ` % Y - % m - % d % H : % M : % S . % f ` , ` % Y - % m - % d % H : % M : % S . % f ` )
[ x for x in thelist if x [ 0 ] = = 1 ]
re . sub ( ` [ ^ 0 - 9a - z A - Z ] + ` , ` ` , text )
return ` ` . join ( c for c in text if c . isdigit ( ) )
plt . savefig ( ` H20 ` , dpi = 300 )
plt . savefig ( ` H20 ` , dpi = 300 )
[ item for item in mylist if len ( item ) = = 1 ]
lst = [ ( p + 0 ) for i in range ( 100 ) ]
lst = [ Object for Object in lst ]
min ( enumerate ( someclass ) , key = lambda x : x [ 1 ] )
df1 . apply ( lambda x : x . tolist ( ) , axis = 1 )
print ( ` < unk > % s , < unk > ` % ( str1 , str1 ) )
` ` ` ` ` ` . join ( map ( str , s [ : : 2 ] ) )
print ( type ( os . path . exists ( ` directory ` ) ) )
sys . exit ( 0 )
sys . exit ( 0 )
sys . exit ( 0 )
` ` ` ` ` ` . join ( map ( ` ` . join , map ( str . replace , ` H3 ` , ` H1 ` ) ) )
` ` ` ` ` ` . join ( map ( chr , int ( ` ` ) ) )
print ( [ ` ` . join ( c for c in aas30dsa20 if c . isdigit ( ) ) for c in aas30dsa20 ] )
soup . find ( ` div ` , href = re . compile ( ` name ` ) ) [ ` name ` ]
dict ( ( k , v ) for k , v in cursor . items ( ) if v )
numpy . loadtxt ( open ( ` file . txt ` , ` rb ` ) , delimiter = ` , ` , skiprows = 1 )
np . importlib ( A < B , axis = 0 ) . B ( )
sum ( 1 for line in open ( ` filepath ` ) )
sum ( a = = a for a in l )
sum ( len ( x ) for x in l )
sum ( len ( x ) for x in l )
sum ( len ( x ) for x in l )
sum ( a = = b for a in l )
dstdir = os . listdir ( ` dstdir ` )
max ( ( k , v ) for k , v in x . items ( ) )
max ( abs ( x ) for x in list ( x . values ( ) ) if x [ 0 ] ! = 0 )
max ( list ( x . items ( ) ) , key = lambda x : x [ 1 ] )
os . write ( put )
df . apply ( lambda x : x . merge ( df [ ` c ` ] , df [ ` a ` ] ) )
d . pop ( ` ele ` , ` None ` )
datetime . datetime . fromtimestamp ( My Model ) . strftime ( ` is ` )
[ list ( t ) for t in zip ( [ ` it ` ] , [ ` was ` ] , [ ` [ ` annoying ` ] ` , ` str_3 ` ] ) ]
np . sum ( 1 for i in range ( 100 ) )
pd . sorted ( df . values . tolist ( ) )
t = list ( t )
map ( list , zip ( * t ) )
level1 = list ( level1 )
dataobject . write ( dataobject )
Bool Col . iloc [ Bool Col [ ` Bool Col ` ] . isin ( [ 1 , 6 ] ) ]
df . groupby ( [ ` Bool Col ` , ` Bool Col ` ] ) [ [ ` Bool Col ` , ` Bool Col ` ] ] . update ( { ` Bool Col ` : df [ ` Bool Col ` ] } )
Bool Col [ df [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]
df . loc [ df [ ` Bool Col ` ] . isin ( [ 1 , 1 ] ) ]
os . chdir ( os . path . dirname ( owd ) )
c . insert ( 0 , ` testfield ` )
` ` ` ` ` ` . join ( x [ 0 ] . strftime ( ` ` ) for x in normal . find ( ` str_3 ` ) . split ( ` , ` ) ) . decode ( ` utf8 ` )
n = ` ` . join ( ` ` . join ( i [ 0 ] . astype ( int ) for s in raw_string . split ( ) ) for s in raw_string . split ( ) )
n = ` ` . join ( ` ` . join ( i [ 0 ] . astype ( int ) for s in raw_byte_string . split ( ) ) for s in raw_byte_string . split ( ) )
print ( re . findall ( ` < unk > ` , s ) )
plt . scatter ( * zip ( * plot ) , * * color )
plt . scatter ( x , y , vmin = 0 , vmax = 15 )
div . find_all ( ` main - content ` , class_ = ` main - content ` )
ids . filter ( ` < unk > ` , str ( ball ) )
df . set_index ( ` Date ` ) . unstack ( level = 0 )
df = pd . Data Frame ( index = df . index )
df . apply ( lambda x : x . tolist ( ) , axis = 1 )
[ i for i , j in enumerate ( b ) if i ! = 1 ]
a = [ ( x , y ) for x , y in zip ( a , b ) ]
[ ( a + b ) for a , b in zip ( a , b ) ]
` ` ` , ` ` ` . join ( str ( i ) for i in list_of_ints )
data = requests . post ( ` DATA ` , cookies = password )
re . findall ( ` < unk > ` , ` abcd } def } ` ) [ - 1 ] . replace ( ` } ` , ` } ` )
print ( [ y for x in zip ( * [ 1 , 2 , 3 ] ) for y in x ] )
[ tuple ( x ) for x in zip ( * d ) ]
os . listdir ( ` hemanth . txt ` )
dict ( ( k , v ) for k , v in x . items ( ) if v = = 1 )
[ list ( x ) for x in zip ( * [ [ ` A ` , ` B ` , ` C ` ] , [ ` D ` , ` E ` , ` F ` ] , [ ` G ` , ` H ` , ` I ` ] ] ) ]
df . groupby ( level = 0 ) . cumcount ( ) = = 0
df . replace ( ` \ n ` , ` < br > ` )
df . replace ( ` < br > ` , ` ` )
[ ` ` . join ( x ) for x in word . split ( ) ]
[ x [ 0 ] for x in word . split ( ` , ` ) ]
urllib . parse . quote ( my String . headers ( ) )
urllib . parse . quote ( my String . headers ( ) )
re . sub ( ` < unk > ` , ` ` , mystring )
calendar . monthrange ( 13 , 1 )
[ [ [ x [ 0 ] ] for x in matrix [ i ] ] for i in range ( len ( matrix ) ) ]
` ` ` ` ` ` . join ( x . strip ( ) or x . isdigit ( ) for x in re . sub ( ` [ \ \ W_ ] + ` , ` ` , para ) . split ( ` ` ) )
print ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
my_string . split ( ` ` )
os . getcwd ( )
[ i for i in l if i in l ]
re . split ( ` / ` , ` Docs / src / Scripts / temp ` )
np . array ( np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] ) )
df [ ` D ` ] = df [ ` B ` ] . apply ( lambda x : x [ ` D ` ] + x [ ` df ` ] )
[ x for x in data if x [ ` B ` ] = = ` B ` ]
string . isdigit ( )
print ( glob . glob ( ` < unk > ` ) )
cursor . execute ( ` INSERT INTO table VALUES ( % s , % s , % s ) ` , ( var1 , var2 , var3 ) ) . update ( key = lambda i : int ( i [ 1 ] ) )
user_list = [ int ( i ) for i in user_input . split ( ) ]
list ( user . split ( ` , ` ) )
sorted ( l , key = lambda x : x [ 1 ] )
ut . sort ( * * operator . attrgetter ( ` cmpfun ` ) )
list ( ut . keys ( ) ) . get ( key = lambda x : x [ 1 ] )
sorted ( ut , * * sorted ( set ( itertools . chain . from_iterable ( ut ) ) ) )
browser . find_element_by_class_name ( ` Send ` ) . click ( )
browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )
browser . find_element_by_class_name ( ` Send In Mail ` ) . click ( )
print ( ` ` . join ( str ( ord ( c ) ) for c in ` ` ) )
df . sort_values ( [ ` x ` , ` y ` ] , ascending = [ ` True ` , ` False ` ] )
os . listdir ( ` # test firstline \ n ` )
sorted ( l , key = lambda x : len ( l [ i ] ) )
re . split ( ` < unk > ` , s )
re . match ( ` ba [ rzd ] ` , foobarrrr ) . group ( 0 )
[ list ( item ) for item in set ( len ( item ) for item in t ) ]
[ list ( item ) for item in set ( len ( item ) for item in source_list ) ]
[ list ( item ) for item in set ( len ( item ) for item in abracadabra ) ]
list ( a )
a = numpy . array ( a , 0 )
print ( soup . find ( ` Address : ` , * * re . compile ( ` Address : ` ) ) . replace ( ` M ` , ` ` ) )
[ ` ` . join ( x ) for x in zip ( * l ) ]
print ( ` ` . join ( zip ( * l ) ) )
driver . find_element_by_id ( ` < unk > ` ) . getcode ( )
re . findall ( ` \ \ d + [ x X ] ` , teststr )
df . loc [ df [ ` B ` ] . isin ( [ 1 , 1 ] ) ]
sorted ( list ( o . items ( ) ) , key = lambda x : x [ 1 ] )
sorted ( d , key = d . get )
sorted ( list ( data . items ( ) ) , key = lambda x : x [ 1 ] )
int ( ` 1 ` , 2 )
sum ( int ( x ) for x in list ( ` ` . join ( map ( str , x ) ) ) )
[ int ( x ) for x in list ( T1 . values ( ) ) ]
subprocess . call ( ` test . sh < unk > ` )
subprocess . call ( [ ` test . sh ` , subprocess . PIPE ( notepad ) ] )
print ( zip ( l1 , l2 ) )
` ` ` Hello ` ` ` . encode ( ` UTF8 ` )
ascii . encode ( ` data to be encoded ` )
np . genfromtxt ( ` text . txt ` , delimiter = ` \ t ` , dtype = ` None ` )
getattr ( my_object , my_str )
dict ( ( k , LD [ k ] ) for k in LD )
map ( sum , zip ( * tuples ) )
dict ( unicodedata . encode ( ` latin - 1 ` ) )
[ w for w in mystring . split ( ) if w not in ` $ ` ]
text . strftime ( ` any ` )
A = np . where ( np . isnan ( A ) , 0 , A )
np . array ( [ 1 , 2 , 3 ] ) . reshape ( 2 , - 1 )
subprocess . call ( ` / pathto / Myr Script . r ` , shell = ` True ` )
subprocess . Popen ( [ ` rm ` , ` - r ` , ` some . file ` ] )
df = pd . read_csv ( ` < unk > ` , skiprows = 1 , header = ` None ` )
df [ ` average ` ] = df [ ` df ` ] . map ( lambda x : x . fillna ( x . mean ( ) ) ) . mean ( )
` ` ` { : , } ` ` ` . format ( timestamp ) . strftime ( ` % Y - % m - % d % H : % M : % S ` )
super ( do , self ) . __init__ ( * args , * * kwargs )
a [ np . arange ( a . shape [ 0 ] ) [ : , ( ` None ` ) ] , a ]
` ` ` ` ` ` . join ( ` ` . join ( map ( lambda x : ` ` . join ( x ) , x ) ) for x in mydict . split ( ` ` ) )
max ( words , key = lambda x : len ( words [ i ] ) )
print ( str ( result [ ` str_2 ` ] ) [ 0 ] )
print ( f . readlines ( ) )
dict ( ( k , v ) for k , v in a . items ( ) if v )
f = open ( ` path / to / FILE_NAME . ext ` , ` wb ` )
df [ ` count ` ] . str . split ( ` ` ) . apply ( lambda x : sum ( x [ 0 ] = = x [ ` count ` ] for x in list ( x . values ( ) ) ) )
any ( k in ` EMP $ $ ` for k in EMP $ $ )
[ k for k , v in dict1 . items ( ) if v = = ` EMP $ $ ` ]
df = pd . Data Frame ( sf , columns = [ ` email ` , ` list ` ] )
print ( ` ` . join ( map ( str , list ) ) )
print ( ` Ð ¿ Ñ \ x80 Ð ¸ ` . encode ( ` UTF8 ` ) )
print ( re . findall ( ` \ \ w ` , ` Sopet Ã ³ n ` ) )
img . show ( )
print ( [ i for i in re . findall ( ` enumerate ` , s ) if i > 0 ] )
struct . unpack ( ` f ` , ` { 0 : . 2f } ` . format ( float ( ` 1 / 3 * 100 ` ) ) )
sorted ( mylist , * * { ` title ` : ` title ` } )
sorted ( l , key = lambda x : list ( x . values ( ) ) [ ` title ` ] , reverse = ` True ` )
order . sort ( key = lambda d : d . get ( ` title ` , d [ ` title_url ` ] ) )
[ max ( x , * * x ) for x in range ( len ( x ) ) ]
soup . body . find All ( text = ` span ` )
df . to_csv ( ` a_schema ` , * * ` False ` )
re . findall ( ` # ( \ \ w + ) ` , ` s ` )
[ k for k , g in itertools . groupby ( [ L ] ) ]
f = open ( ` file ` , ` r ` )
len ( testlist ) - len ( set ( testlist ) )
len ( testlist ) - len ( set ( testlist ) )
len ( testlist ) - len ( set ( testlist ) )
len ( testlist ) - len ( set ( testlist ) )
len ( testlist ) - len ( set ( testlist ) )
len ( testlist ) - element [ : : - 1 ]
len ( testlist ) - element [ : : - 1 ]
[ x [ 0 ] for x in lis ]
max ( enumerate ( lis ) , key = lambda x : x [ 0 ] ) [ 0 ]
sleep . sleep ( 1 )
` ` ` ` ` ` . join ( item for item in L for item in list ( item ) )
b = models . Foreign Key ( ` 0000000 ` , order_by = ` 0000000 ` )
sorted ( list ( list5 . items ( ) ) , key = lambda x : x [ 1 ] )
sorted ( list ( mydict . items ( ) ) , key = lambda a : ( a [ a ] , b ) )
list ( range ( 1 , 3 ) )
[ x for x in oldlist if x [ 1 ] = = 0 ]
f = open ( ` yourfile . txt ` , ` wb ` )
getattr ( obj , ` attr ` )
hex ( tuple ( map ( lambda t : ( x , t + t ) , ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) ) )
[ list ( x ) for x in zip ( * ( ( ` aa ` , ) , ( ` bb ` , ) , ( ` cc ` , ) ) ) ]
df = pd . Data Frame ( [ a ] , columns = [ ` a ` , ` b ` ] )
[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . append ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )
[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] . append ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) ] )
zip ( * original )
original . sort ( * * original )
[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . append ( [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] )
[ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] . insert ( 0 , ` [ ( ` a ` , 1 ) , ( ` b ` , 2 ) , ( ` c ` , 3 ) , ( ` d ` , 4 ) , ( ` e ` , ) ] ` )
json . dumps ( { ` Decimal ( ` 3 . 9 ` ) ` . encode ( ` Decimal ( ` 3 . 9 ` ) ` ) : v for k , v in json . enumerate ( Decimal ( ` 3 . 9 ` ) ) } )
d [ ` mynewkey ` ] . update ( { mynewkey } )
globals ( ) . update ( { ` a ` : 1 } )
globals ( ) . update ( { ` a ` : 1 } )
globals ( ) . update ( { ` a ` : 1 } )
numpy . argwhere ( np . all ( matrix = = [ matrix ] ) )
print ( round ( answer , 2 ) )
pat = re . compile ( ` < unk > ` )
df . filter ( lambda df : np . arange ( A . sum ( ) ) = = 1 )
myfile . write ( open ( ` file . txt ` , ` w ` ) . read ( ) )
lst = [ int ( x ) for x in open ( ` filename . txt ` ) . read ( ) ]
plt . plot ( mappable , bar , color = color )
df . groupby ( ` text ` ) . agg ( lambda x : x . tolist ( ) )
re . findall ( ` \ \ S + ` , str1 )
print ( list ( itertools . product ( [ ( 1 , 2 , 3 ) ] , 2 ) ) )
time . mktime ( datetime ( microsecond = 0 ) . split ( ) ) . encode ( ` utf - 8 ` )
l = [ [ x for x in s if x ! = x ] for x in list1 ]
list2 = [ item for item in list1 for item in word . split ( ` : ` ) ]
data = json . loads ( request . POST . get ( ` data ` , ` { } ` ) )
example_str . find All ( ` div ` , href = re . compile ( ` \ \ s + ` ) )
re . findall ( ` \ \ [ ( . * ? ) \ \ ] ` , example_str )
print ( ` ` . join ( re . findall ( ` « ( [ \ \ s \ \ S ] * ? ) » ` , ( zyx ) bc ) ) )
re . match ( ` \ \ ( ( . * ? ) \ \ ) | ( \ \ w ) ` , ` ( zyx ) bc ` )
print ( ` ` . join ( filter ( re . match , ` | ` , ( zyx ) bc ) ) )
re . findall ( ` % { 0 } % ` , elements )
print ( subprocess . check_output ( ` < unk > ` , shell = ` True ` ) )
[ k for k , v in mydict . items ( ) if v = = 1 ]
dict ( map ( lambda s : s . split ( ` : ` ) , [ ( ` Name ` , ` Joe ` ) , ( ` Age ` , 22 ) ] ) )
np . dstack ( np . meshgrid ( data , data ) , axis = 1 ) . mean ( )
re . sub ( ` ( . ) ` , ` \ \ 1 \ \ 1 ` , text . read ( ) )
re . findall ( ` < unk > ` , ` < unk > ` )
plt . gca ( ) . plot ( x = ` col_name_1 ` , y = ` col_name_2 ` , style = ` o ` )
dict ( ( v , k ) for k , v in my Dictionary . items ( ) )
[ a for c in how if ` what ` in c ]
any ( x in obj for x in obj . split ( ` , ` ) )
any ( x in o for x in o . split ( ` , ` ) )
any ( x in o for x in o . split ( ` , ` ) )
any ( x in o for x in o . split ( ` , ` ) )
any ( i in obj_to_test for i in obj_to_test . split ( ` , ` ) )
[ j for i in list1 for j in i ]
[ j for i in mylog for j in i ]
[ j for i in a for j in i ]
[ list ( y ) for y in mylog ]
[ ( x + y ) for x , y in zip ( a , b ) ]
SECRET_KEY = models . Foreign Key ( ` Your_secret_string ` , unique = ` True ` )
pd . Data Frame ( data , columns = [ ` out - 1 ` , ` out - 2 ` ] )
[ i for i , j in enumerate ( stocks_list ) if i = = ` MSFT ` ]
plt . plot ( list ( range ( 0 , len ( ax ) + 1 ) ) , vmin = 0 , vmax = 15 )
s . replace ( ` and ` , ` ` )
print ( os . path . dirname ( os . path . realpath ( __file__ ) ) )
re . findall ( ` \ n \ \ s * \ n ` , str )
re . split ( ` [ ] ( ? = [ A - Z ] + \ \ b ) ` , input )
input . split ( ` ` )
r = requests . get ( files , auth = ( ` url ` , ` headers ` ) )
filename . write ( struct . pack ( ` < I ` , open ( bytes_ ) ) )
dict ( ( k . get ( ` key ` ) , v ) for k , v in list ( dct . values ( ) ) )
x . set_index ( ` name ` ) . agg ( lambda x : x . tolist ( ) )
round ( 1 . 923328437452 , 3 )
li . sort ( key = operator . itemgetter ( 1 ) )
ax . errorbar ( x , ax , yerr = err , ecolor = ` ax ` )
os . my_path . abspath ( my_path )
sum ( i for i in list ( yourdict . keys ( ) ) )
sum ( len ( v ) for v in yourdictfile . values ( ) )
pd . concat ( [ df . head ( 1 ) , pd . Time Grouper ( freq = ` id ` ) ] )
pd . concat ( [ df1 , df2 ] , axis = 1 )
data . startswith ( ` src = ` js / ( [ ^ ` ] * \ \ bjquery \ \ b [ ^ ` ] * ) ` ` )
sum ( sum ( x ) for x in [ ` ` , ` 3 . 4 ` , ` ` , ` ` , ` 1 . 0 ` ] )
subprocess . call ( ` c : \ \ Program Files \ \ VMware \ \ VMware Server \ \ vmware - cmd . bat ` , shell = ` True ` )
super ( q , self ) . __init__ ( * args , * * kwargs )
df . groupby ( [ ` group ` , ` color ` ] ) . agg ( lambda x : x . barplot ( ) )
re . findall ( ` ( [ a - f A - F \ \ d ] { 32 } ) ` , data )
len ( my_list )
len ( l )
len ( s )
len ( len ( my_tuple ) )
len ( len ( my_string ) )
re . sub ( ` < unk > ` , ` \ \ a ` , ` \ \ a ` )
a . replace ( ` b ` , ` a ` )
sys . path . insert ( 0 , ` / folder_name ` )
data [ ` weekday ` ] = data [ ` my_dt ` ] / data [ ` weekday ` ]
sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) )
sorted ( iter ( x . items ( ) ) , key = itemgetter ( 1 ) , reverse = ` True ` )
np . append ( my_data , var_1 [ : , ( ` None ` ) ] , b [ ( ` None ` ) , : ] )
np . concatenate ( ( a , b ) , axis = 0 )
np . concatenate ( [ a , b ] , axis = 1 )
np . concatenate ( ( a , b ) , axis = 0 )
np . concatenate ( ( a , b ) , axis = 0 )
port . google . com ( )
df [ ` day ` ] = df ( ` sat ` )
request . GET . get ( ` < unk > ` , ` % d % b % Y ` )
app = subprocess . Assertion Error ( ` wherever ` ) shutil . copy2 ( ` wherever ` , ` wherever ` )
cursor . execute ( ` INSERT INTO table ( ` column1 ` ) VALUES ( % s ) ` , ( t2 , ) )
sorted ( c2 , * * [ c2 ] )
sorted ( var_1 , key = lambda x : x [ 1 ] )
sorted ( var_1 , key = lambda x : x [ 1 ] )
plt . savefig ( ` Arial ` , bbox_inches = ` size ` )
pd . to_datetime ( pd . Time Grouper ( hours = 5 ) ) + 1
print ( element . page_source )
df [ ` bob ` ] . apply ( lambda x : int ( x ) )
os . system ( ` gnome ` )
my_dict [ ` third_key ` ] . update ( { third_key } )
T = [ 1 , 2 , 3 ]
my_list . insert ( 2 , ` 12 ` )
my List = list ( int ( x ) for x in my List )
struct . pack ( ` < I ` , 1633837924 ) . encode ( ` utf - 8 ` )
df . loc [ ~ df [ ` A ` ] . isin ( df ) ]
df . loc [ gb . groups [ ` Letters ` ] , ( ` C ` , ` C ` ) ]
list ( zip ( [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ) )
isinstance ( i , i )
isinstance ( v , v )
isinstance ( v , v )
isinstance ( v , v )
isinstance ( v , v )
isinstance ( variable_name , int )
print ( json . load ( f ) )
print ( ` < unk > ` . format ( word ) )
print ( ` ` . join ( list ) )
y = [ [ ] for i in range ( 3 ) ]
data = [ line . rstrip ( ` \ n ` ) for line in open ( ` C : / name / My Documents / numbers ` ) ]
` ` ` it is icy ` ` ` . replace ( ` i ` , ` ` )
re . sub ( ` < unk > ` , ` ` , it is icy )
` ` ` it is icy ` ` ` . translate ( ` ` . join ( c for c in it is icy if c not in c ) )
newstr = oldstr . replace ( ` M ` , ` ` )
df . loc [ df [ ` 1 ` ] . isin ( [ ` 1 ` , ` 1 ` ] ) , ` 1 ` ]
[ list ( item ) for key , item in list ( my List . _fields . items ( ) ) ]
intstringlist = [ int ( x ) for x in nums ]
[ int ( x ) for x in map ( list , zip ( * integers ) ) ]
print ( ` < unk > % s , < unk > ` % ( 1 , 2 , 3 ) )
sum ( x * y for x , y in zip ( 2 . 52 * 100 , 2 . 52 * 100 ) )
results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]
results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]
results + = [ each for each in os . listdir ( ` / mydir ` ) if each . endswith ( ` . txt ` ) ]
df . legend ( frameon = ` False ` )
print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )
print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )
print ( socket . loads ( os . path . normpath ( ` 192 . 168 . x . x ` ) ) )
sum ( float ( x ) for x in x )
line2 . write ( ` \ n ` . join ( line3 for i , v in zip ( line1 , line2 ) if c ! = ` line3 ` ) )
[ j for i in data for j in i ]
print ( ` \ n ` . format ( foo bar ) )
s = s . replace ( ` , ` , ` ` )
np . dot ( x [ : , ( 2 ) ] , axis = 0 ) . mean ( )
np . mean ( np . mean ( x [ : , ( ` None ` ) ] ) , axis = 0 )
numpy . loadtxt ( open ( ` new . txt ` , ` rb ` ) , delimiter = ` new . txt ` )
sorted ( l , key = lambda x : x [ ` time ` ] )
sorted ( l , key = l . get , reverse = ` True ` )
df . apply ( lambda x : x . endswith ( ` ( Hel | Just ) ` ) )
print ( ` ` . join ( re . findall ( ` < unk > ` , your_string ) ) )
pd . to_datetime ( df . index . dt [ 0 ] , format = ` < unk > ` )
` ` ` The big brown fox is brown ` ` ` . count ( ` brown ` )
json . load ( json )
file_name = wget . download ( file_name )
re . split ( ` ` , text )
re . split ( ` , ` , ` , ` )
[ x . strip ( ) for x in line . split ( ` , ` ) ]
` ` ` ` ` ` . join ( [ chr ( i ) for i in s ] )
list_of_strings . sort ( key = lambda x : s . index ( x [ 0 ] ) )
pandas . read_csv ( ` | ` , shell = ` True ` )
[ dict ( y ) for y in lst ]
[ x for x in lst if x [ 2 ] = = 1 ]
sorted ( list_to_be_sorted , key = lambda x : trial_dict [ x ] )
sorted ( l , key = lambda i : list ( i . values ( ) ) [ 0 ] , reverse = ` True ` )
sorted ( data , key = lambda i : list ( i . values ( ) ) [ 0 ] )
sorted ( data , key = lambda i : list ( i . values ( ) ) [ 0 ] )
df . sort_values ( * * ` row ` )
dict ( ( i , list ( trans . items ( ) ) [ i ] ) for i in trans )
` ` ` ` ` ` . join ( [ ` A ` , ` B ` , ` C ` , ` D ` ] )
json . loads ( ` url ` )
[ x for x in sents if x is not ` None ` ]
datetime . datetime . now ( )
list . sort ( key = lambda x : ( x [ ` points ` ] , x [ ` time ` ] ) )
time . time ( )
suff . append ( [ ( x + y ) for x , y in zip ( long . file . name . jpg , _a ) ] )
module = 1
int ( round ( number ) )
float ( numlist )
df . to_csv ( ` 5 ` , index = ` False ` )
parser . parse ( ` unescaped ` )
[ ord ( c ) for c in range ( 10 ) ]
new File . write ( ` { 0 : 0b } ` . format ( new File ) )
re . sub ( ` < unk > ` , ` ` , string ) . lower ( )
print ( dict [ - 1 ] )
f . write ( ` hi there ` )
myfile . write ( ` hi there ` )
f . write ( ` Hello ` )
ord ( ` c ` )
Authorized Email . objects . order_by ( ` ? ` ) [ ` added ` ]
print ( re . findall ( ` \ \ d + ` , ` ` . join ( [ str ( p ) for p in re . finditer ( ` [ A - Za - z ` ] + ` , text ) ] ) ) )
` ` ` ` ` ` . join ( ` ` . join ( map ( str , x ) ) for x in re . findall ( ` [ A - Za - z ` ] + ` , text ) )
subprocess . call ( [ ` script . ps1 ` , ` powershell . exe ` , script . ps1 ] )
sorted ( b , key = lambda e : e [ 0 ] )
[ k for k , v in cf . items ( ) if v = = 1 ]
datetime . datetime . now ( )
[ i for i in lst if i > 3 ]
[ ( x1 - x2 ) for x1 , x2 in zip ( a , 13 ) ]
random . choice ( os . path . expanduser ( ` C : \ \ ` ) )
print ( max ( x , key = x ) )
s . tag
re . match ( ` find_element_by_xpath ` , document )
[ x . strip ( ) for x in mystring . split ( ` ` ) ]
f = open ( ` r ` , ` r ` )
sum ( j for i , j in zip ( data , data ) if i ! = 1 )
plt . yscale ( ` log ` , nonposy = ` clip ` )
